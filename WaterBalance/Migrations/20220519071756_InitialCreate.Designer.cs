// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WaterBalance.Models;

namespace WaterBalance.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220519071756_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("WaterBalance.Models.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConsumerName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ConsumptionRatePerDay")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HotWaterBool")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HotWaterConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormativeDocument")
                        .HasColumnType("TEXT");

                    b.Property<double>("Unit")
                        .HasColumnType("REAL");

                    b.Property<string>("UnitName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WastewaterCollection")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("WaterBalance.Models.DailyUseColdWater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ConsumptionPerDayColdWater")
                        .HasColumnType("REAL");

                    b.Property<double?>("ConsumptionPerHourColdWater")
                        .HasColumnType("REAL");

                    b.Property<double?>("ConsumptionPerSecondColdWater")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId")
                        .IsUnique();

                    b.ToTable("DailyUseColdWater");
                });

            modelBuilder.Entity("WaterBalance.Models.DailyUseHotWater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ConsumptionPerDayHotWater")
                        .HasColumnType("REAL");

                    b.Property<double?>("ConsumptionPerHourHotWater")
                        .HasColumnType("REAL");

                    b.Property<double?>("ConsumptionPerSecondHotWater")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId")
                        .IsUnique();

                    b.ToTable("DailyUseHotWater");
                });

            modelBuilder.Entity("WaterBalance.Models.DailyWastewaterCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WastewaterCollectionPerDay")
                        .HasColumnType("REAL");

                    b.Property<double?>("WastewaterCollectionPerHour")
                        .HasColumnType("REAL");

                    b.Property<double?>("WastewaterCollectionPerSecond")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId")
                        .IsUnique();

                    b.ToTable("DailyWastewaterCollection");
                });

            modelBuilder.Entity("WaterBalance.Models.DailyUseColdWater", b =>
                {
                    b.HasOne("WaterBalance.Models.Consumer", "Consumer")
                        .WithOne("DailyUseColdWater")
                        .HasForeignKey("WaterBalance.Models.DailyUseColdWater", "ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("WaterBalance.Models.DailyUseHotWater", b =>
                {
                    b.HasOne("WaterBalance.Models.Consumer", "Consumer")
                        .WithOne("DailyUseHotWater")
                        .HasForeignKey("WaterBalance.Models.DailyUseHotWater", "ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("WaterBalance.Models.DailyWastewaterCollection", b =>
                {
                    b.HasOne("WaterBalance.Models.Consumer", "Consumer")
                        .WithOne("DailyWastewaterCollection")
                        .HasForeignKey("WaterBalance.Models.DailyWastewaterCollection", "ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("WaterBalance.Models.Consumer", b =>
                {
                    b.Navigation("DailyUseColdWater");

                    b.Navigation("DailyUseHotWater");

                    b.Navigation("DailyWastewaterCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
